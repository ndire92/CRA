# Generated by Django 5.2.3 on 2025-06-24 18:15

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=200)),
                ('date_debut', models.DateField()),
                ('description', models.TextField(blank=True)),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('arbitre', 'Arbitre'), ('inspecteur', 'Inspecteur'), ('admin', 'Administrateur')], max_length=20)),
                ('telephone', models.CharField(blank=True, max_length=15)),
                ('date_naissance', models.DateField(blank=True, null=True)),
                ('adresse', models.TextField(blank=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Arbitre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('niveau', models.CharField(choices=[('regional', 'Régional'), ('national', 'National'), ('elite', 'Elite')], max_length=20)),
                ('postes_preferes', models.CharField(blank=True, choices=[('central', 'Arbitre Central'), ('assistant', 'Arbitre Assistant'), ('quatrieme', 'Quatrième Arbitre')], max_length=50, null=True)),
                ('experience_annees', models.IntegerField(default=0)),
                ('actif', models.BooleanField(default=True)),
                ('note_moyenne', models.FloatField(default=0)),
                ('nombre_matchs', models.IntegerField(default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Inspecteur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('niveau', models.CharField(choices=[('regional', 'Régional'), ('national', 'National'), ('elite', 'Elite')], max_length=20)),
                ('experience_annees', models.IntegerField(default=0)),
                ('actif', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('equipe_domicile', models.CharField(max_length=100)),
                ('equipe_exterieur', models.CharField(max_length=100)),
                ('date_match', models.DateTimeField()),
                ('lieu', models.CharField(max_length=200)),
                ('statut', models.CharField(choices=[('programme', 'Programmé'), ('en_cours', 'En cours'), ('termine', 'Terminé'), ('reporte', 'Reporté')], default='programme', max_length=20)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestion.competition')),
            ],
        ),
        migrations.CreateModel(
            name='Designation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_designation', models.DateTimeField(auto_now_add=True)),
                ('arbitre_assistant1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assistant1', to='gestion.arbitre')),
                ('arbitre_assistant2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assistant2', to='gestion.arbitre')),
                ('arbitre_central', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='central', to='gestion.arbitre')),
                ('quatrieme_arbitre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='quatrieme', to='gestion.arbitre')),
                ('inspecteur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestion.inspecteur')),
                ('match', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='gestion.match')),
            ],
        ),
        migrations.CreateModel(
            name='Rapport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note_arbitre_central', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)])),
                ('note_assistant1', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)])),
                ('note_assistant2', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)])),
                ('note_quatrieme', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20)])),
                ('commentaire_central', models.TextField()),
                ('commentaire_assistant1', models.TextField()),
                ('commentaire_assistant2', models.TextField()),
                ('commentaire_quatrieme', models.TextField(blank=True)),
                ('commentaire_general', models.TextField()),
                ('incidents', models.TextField(blank=True)),
                ('recommandations', models.TextField(blank=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('designation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='gestion.designation')),
                ('inspecteur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestion.inspecteur')),
            ],
        ),
        migrations.CreateModel(
            name='Disponibilite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_debut', models.DateField()),
                ('date_fin', models.DateField()),
                ('disponible', models.BooleanField(default=True)),
                ('commentaire', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'date_debut', 'date_fin')},
            },
        ),
    ]
